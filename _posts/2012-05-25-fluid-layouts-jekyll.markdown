---
layout: post
title: Fluid Layouts in Jekyll
date: 2012-06-25T21:00:00.1Z
summary: For larks and good cheer, I decided to make this site use a fluid, responsive/adaptive (I refuse to acknowledge a meaningful distinction between these terms) layout.
---

NOTE: I've since updated the site further, so this article no longer holds entirely true for this site...

For larks and good cheer, I decided to make this site use a fluid, responsive/adaptive (I refuse to acknowledge a meaningful distinction between these terms) layout.

Now, to be frank, I don't believe that responsive design is *the* future. I don't believe it's a good way to create genuinely *great* mobile experiences, because fundamentally you're just shuffling content about. This doesn't cut it - things that are easy to do on desktop are hard / inconvenient on mobile (not to mention bandwidth). Functionality that's awesome on mobiles (compasses, accelerometers, GPS, multitouch) isn't available on desktop. If you want to create a great mobile experience for a web application, you need to produce something wholly dedicated to mobile.

This doesn't mean an app. Apps aren't the future either. They're too much commitment. But it does mean an awesome mobile site.

However, all that being said, responsive design still has *a* future. There are two big reasons why:

### First

Sometimes, it isn't necessary, or you just don't care that much. It's a lot quicker to create a simple responsive design than it is to create a dedicated mobile site. In fact, you can probably do it pretty quickly on any site. Unfloat the main nav. Delete the sidebar. Remove the manually set widths. 15 minutes and you've got a rough plan.

Note what I said about deleting. To be frank, the best thing you can do to make a good mobile site is to delete all the crap that you've filled your page with that no-one actually notices. Maybe you'll then decide to delete it on the main site, too. I'd welcome this. If your site is a content site, start thinking of each page as an article, not a summation of everything you've ever said or done or thought.

Before you know it, you'll find that the differences between your mobile and desktop sites are pretty slim. That's a lesson in itself.

### Second 

Discoverability. It doesn't matter how amazing your super-special mobile site is if it is super-secret too. Sometimes I stick an 'm.' in front of a domain in the hope of a mobile site, but I don't have success often enough to do it regularly.

You can do some server side logic to look at where requests are coming from and route them to the right place, but this is (quite frankly) an awful thing which leads you down dark and evil paths. Don't do it. If I request a page, give me it.

So realistically, your best bet is to give people a site which works well, and then plug your awesome mobile site/app/roadshow/whatever from that pretty good site. No matter how good your app is, people will visit your site on mobile, so you need that to be a good experience.

### What I did

Well, I fall into the first category. There isn't so much cruft on the site that I can't just shuffle things round a little and get something respectable, and the whole point of Jekyll is that it is simple - I don't want any silly subdomains. So I did a nice simple responsive layout. This site has one main CSS file (they're all generated by Less, but you don't care that much about that) that defines things like font styles, hover states, background colors, and so on and so forth. Then, I've got four individual CSS files which are all imported based on device width.

If you're 480px or under, you get 'Small' (it looks nice on your smartphone). I've dumped 'Projects' from the sidebar. You probably don't care. The footer gets shuffled. The header gets shuffled. Things are a bit tighter.

Between 480px and 760px you get 'Mid'. 'Projects' is back, yay! You love 'Projects'! Check them out! It's hanging out in the footer, alongside the past posts and 'About Me'. The header stuff gets a bit bigger, but the text is still full width - you'll probably like this if you're using your iPad in portrait mode.

Above 760px and below 1200px you get 'Full'. This covers your average desktop/laptop user. 'Projects' is in the sidebar (so the content area is narrower and has a sensible/readable line length). The page as a whole is no wider than 960px (but will scale nicely below that, keeping the sidebar/main column in the same proportion) - if you go beyond 960px, you get even margins either side.

Above 1200px and you are 'Huge'. This is something that's emerging a lot more from the responsive crowd: the realisation that some people have enormous monitors and would like to use them. I think adapting to this width is ultimately going to be one of the biggest uses for responsive design if you're in the 'web app' field - suddenly, you can have a lot more information and functionality at the user's fingertips (or rather, right in front of their eyes). For my site, frankly, I don't have much to do with the space, but I'm letting some of the spacing grow, and letting the sidebar get wider - all with the idea of giving a sense of space.

I haven't put any code in this because it isn't very difficult and it should all be pretty obvious. But hopefully what I've said about responsive layouts isn't too obvious.